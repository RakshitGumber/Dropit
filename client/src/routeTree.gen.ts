/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index/route'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as AuthSignupRouteImport } from './routes/auth/signup/route'
import { Route as protectedDashboardRouteImport } from './routes/(protected)/dashboard/route'

// Create/Update Routes

const IndexRouteRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthSignupRouteRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRoute,
} as any)

const protectedDashboardRouteRoute = protectedDashboardRouteImport.update({
  id: '/(protected)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/dashboard': {
      id: '/(protected)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedDashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/dashboard': typeof protectedDashboardRouteRoute
  '/auth/signup': typeof AuthSignupRouteRoute
  '/auth/login': typeof AuthLoginRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/dashboard': typeof protectedDashboardRouteRoute
  '/auth/signup': typeof AuthSignupRouteRoute
  '/auth/login': typeof AuthLoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRouteRoute
  '/(protected)/dashboard': typeof protectedDashboardRouteRoute
  '/auth/signup': typeof AuthSignupRouteRoute
  '/auth/login': typeof AuthLoginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard' | '/auth/signup' | '/auth/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard' | '/auth/signup' | '/auth/login'
  id:
    | '__root__'
    | '/'
    | '/(protected)/dashboard'
    | '/auth/signup'
    | '/auth/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  protectedDashboardRouteRoute: typeof protectedDashboardRouteRoute
  AuthSignupRouteRoute: typeof AuthSignupRouteRoute
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  protectedDashboardRouteRoute: protectedDashboardRouteRoute,
  AuthSignupRouteRoute: AuthSignupRouteRoute,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(protected)/dashboard",
        "/auth/signup",
        "/auth/login"
      ]
    },
    "/": {
      "filePath": "index/route.tsx"
    },
    "/(protected)/dashboard": {
      "filePath": "(protected)/dashboard/route.tsx"
    },
    "/auth/signup": {
      "filePath": "auth/signup/route.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
