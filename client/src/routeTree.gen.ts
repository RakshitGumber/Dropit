/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WaitlistRouteRouteImport } from './routes/waitlist/route'
import { Route as IndexRouteRouteImport } from './routes/index/route'
import { Route as AuthSignupRouteRouteImport } from './routes/auth/signup/route'
import { Route as AuthLoginRouteRouteImport } from './routes/auth/login/route'
import { Route as waitlistPreregisterRouteRouteImport } from './routes/(waitlist)/preregister/route'
import { Route as protectedDashboardRouteRouteImport } from './routes/(protected)/dashboard/route'
import { Route as protectedFlowIdRouteImport } from './routes/(protected)/flow/$id'
import { Route as waitlistTryFlowRouteRouteImport } from './routes/(waitlist)/try/flow/route'
import { Route as waitlistTryApiRouteRouteImport } from './routes/(waitlist)/try/api/route'

const WaitlistRouteRoute = WaitlistRouteRouteImport.update({
  id: '/waitlist',
  path: '/waitlist',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRouteRoute = IndexRouteRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRouteRoute = AuthSignupRouteRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRouteRoute = AuthLoginRouteRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const waitlistPreregisterRouteRoute =
  waitlistPreregisterRouteRouteImport.update({
    id: '/(waitlist)/preregister',
    path: '/preregister',
    getParentRoute: () => rootRouteImport,
  } as any)
const protectedDashboardRouteRoute = protectedDashboardRouteRouteImport.update({
  id: '/(protected)/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const protectedFlowIdRoute = protectedFlowIdRouteImport.update({
  id: '/(protected)/flow/$id',
  path: '/flow/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const waitlistTryFlowRouteRoute = waitlistTryFlowRouteRouteImport.update({
  id: '/(waitlist)/try/flow',
  path: '/try/flow',
  getParentRoute: () => rootRouteImport,
} as any)
const waitlistTryApiRouteRoute = waitlistTryApiRouteRouteImport.update({
  id: '/(waitlist)/try/api',
  path: '/try/api',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRouteRoute
  '/waitlist': typeof WaitlistRouteRoute
  '/dashboard': typeof protectedDashboardRouteRoute
  '/preregister': typeof waitlistPreregisterRouteRoute
  '/auth/login': typeof AuthLoginRouteRoute
  '/auth/signup': typeof AuthSignupRouteRoute
  '/try/api': typeof waitlistTryApiRouteRoute
  '/try/flow': typeof waitlistTryFlowRouteRoute
  '/flow/$id': typeof protectedFlowIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRouteRoute
  '/waitlist': typeof WaitlistRouteRoute
  '/dashboard': typeof protectedDashboardRouteRoute
  '/preregister': typeof waitlistPreregisterRouteRoute
  '/auth/login': typeof AuthLoginRouteRoute
  '/auth/signup': typeof AuthSignupRouteRoute
  '/try/api': typeof waitlistTryApiRouteRoute
  '/try/flow': typeof waitlistTryFlowRouteRoute
  '/flow/$id': typeof protectedFlowIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRouteRoute
  '/waitlist': typeof WaitlistRouteRoute
  '/(protected)/dashboard': typeof protectedDashboardRouteRoute
  '/(waitlist)/preregister': typeof waitlistPreregisterRouteRoute
  '/auth/login': typeof AuthLoginRouteRoute
  '/auth/signup': typeof AuthSignupRouteRoute
  '/(waitlist)/try/api': typeof waitlistTryApiRouteRoute
  '/(waitlist)/try/flow': typeof waitlistTryFlowRouteRoute
  '/(protected)/flow/$id': typeof protectedFlowIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/waitlist'
    | '/dashboard'
    | '/preregister'
    | '/auth/login'
    | '/auth/signup'
    | '/try/api'
    | '/try/flow'
    | '/flow/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/waitlist'
    | '/dashboard'
    | '/preregister'
    | '/auth/login'
    | '/auth/signup'
    | '/try/api'
    | '/try/flow'
    | '/flow/$id'
  id:
    | '__root__'
    | '/'
    | '/waitlist'
    | '/(protected)/dashboard'
    | '/(waitlist)/preregister'
    | '/auth/login'
    | '/auth/signup'
    | '/(waitlist)/try/api'
    | '/(waitlist)/try/flow'
    | '/(protected)/flow/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute
  WaitlistRouteRoute: typeof WaitlistRouteRoute
  protectedDashboardRouteRoute: typeof protectedDashboardRouteRoute
  waitlistPreregisterRouteRoute: typeof waitlistPreregisterRouteRoute
  AuthLoginRouteRoute: typeof AuthLoginRouteRoute
  AuthSignupRouteRoute: typeof AuthSignupRouteRoute
  waitlistTryApiRouteRoute: typeof waitlistTryApiRouteRoute
  waitlistTryFlowRouteRoute: typeof waitlistTryFlowRouteRoute
  protectedFlowIdRoute: typeof protectedFlowIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/waitlist': {
      id: '/waitlist'
      path: '/waitlist'
      fullPath: '/waitlist'
      preLoaderRoute: typeof WaitlistRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(waitlist)/preregister': {
      id: '/(waitlist)/preregister'
      path: '/preregister'
      fullPath: '/preregister'
      preLoaderRoute: typeof waitlistPreregisterRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/dashboard': {
      id: '/(protected)/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedDashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(protected)/flow/$id': {
      id: '/(protected)/flow/$id'
      path: '/flow/$id'
      fullPath: '/flow/$id'
      preLoaderRoute: typeof protectedFlowIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(waitlist)/try/flow': {
      id: '/(waitlist)/try/flow'
      path: '/try/flow'
      fullPath: '/try/flow'
      preLoaderRoute: typeof waitlistTryFlowRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(waitlist)/try/api': {
      id: '/(waitlist)/try/api'
      path: '/try/api'
      fullPath: '/try/api'
      preLoaderRoute: typeof waitlistTryApiRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  WaitlistRouteRoute: WaitlistRouteRoute,
  protectedDashboardRouteRoute: protectedDashboardRouteRoute,
  waitlistPreregisterRouteRoute: waitlistPreregisterRouteRoute,
  AuthLoginRouteRoute: AuthLoginRouteRoute,
  AuthSignupRouteRoute: AuthSignupRouteRoute,
  waitlistTryApiRouteRoute: waitlistTryApiRouteRoute,
  waitlistTryFlowRouteRoute: waitlistTryFlowRouteRoute,
  protectedFlowIdRoute: protectedFlowIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
